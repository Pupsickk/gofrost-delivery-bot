import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove
)
from geopy.distance import geodesic
import sqlite3
from datetime import datetime
import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7651244269:AAHO6Udl8MmVMK9H64Qy5UzySsBlIdHqhYE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_ID = "649815636"  # –í–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤ –ö—Ä—ã–º–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
CITIES = {
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": (44.952116, 34.102411),
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": (44.616650, 33.525366),
    "–Ø–ª—Ç–∞": (44.495194, 34.166302),
    "–ê–ª—É—à—Ç–∞": (44.676383, 34.410038),
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": (45.190629, 33.367634),
    "–ö–µ—Ä—á—å": (45.356985, 36.467428),
    "–§–µ–æ–¥–æ—Å–∏—è": (45.031878, 35.382435),
    "–°–∞–∫–∏": (45.133693, 33.577239),
    "–ë–∞—Ö—á–∏—Å–∞—Ä–∞–π": (44.755135, 33.857862),
    "–î–∂–∞–Ω–∫–æ–π": (45.709146, 34.388665)
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DeliveryForm(StatesGroup):
    from_city = State()
    to_city = State()
    weight = State()
    temperature = State()
    urgency = State()
    phone = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('delivery_orders.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        phone TEXT,
        from_city TEXT,
        to_city TEXT,
        weight REAL,
        temperature TEXT,
        urgency TEXT,
        price REAL,
        created_at TEXT
    )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_cities_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=city) for city in list(CITIES.keys())[i:i+2]] 
            for i in range(0, len(CITIES), 2)
        ],
        resize_keyboard=True
    )

def get_temperature_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"), KeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∫–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def get_urgency_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"), KeyboardButton(text="–°—Ä–æ—á–Ω–∞—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def get_phone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def get_confirmation_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_price(from_city: str, to_city: str, weight: float, temperature: str, urgency: str) -> float:
    # –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
    price = 500
    
    # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    distance = geodesic(CITIES[from_city], CITIES[to_city]).km
    price += distance * 30
    
    # –ù–∞–¥–±–∞–≤–∫–∏
    if weight > 10:
        price += 100
    if temperature == "–ó–∞–º–æ—Ä–æ–∑–∫–∞":
        price += 500
    if urgency == "–°—Ä–æ—á–Ω–∞—è":
        price += 1000
    
    return round(price, 2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùÑÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GoFROST - —Å–µ—Ä–≤–∏—Å —Ö–æ–ª–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ö—Ä—ã–º—É!\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_cities_keyboard()
    )
    await state.set_state(DeliveryForm.from_city)

@dp.message(DeliveryForm.from_city, F.text.in_(CITIES.keys()))
async def process_from_city(message: types.Message, state: FSMContext):
    await state.update_data(from_city=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_cities_keyboard()
    )
    await state.set_state(DeliveryForm.to_city)

@dp.message(DeliveryForm.to_city, F.text.in_(CITIES.keys()))
async def process_to_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == data['from_city']:
        await message.answer("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:")
        return
    
    await state.update_data(to_city=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.5):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(DeliveryForm.weight)

@dp.message(DeliveryForm.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError
        await state.update_data(weight=weight)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º:",
            reply_markup=get_temperature_keyboard()
        )
        await state.set_state(DeliveryForm.temperature)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

@dp.message(DeliveryForm.temperature, F.text.in_(["–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ", "–ó–∞–º–æ—Ä–æ–∑–∫–∞"]))
async def process_temperature(message: types.Message, state: FSMContext):
    await state.update_data(temperature=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_urgency_keyboard()
    )
    await state.set_state(DeliveryForm.urgency)

@dp.message(DeliveryForm.urgency, F.text.in_(["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "–°—Ä–æ—á–Ω–∞—è"]))
async def process_urgency(message: types.Message, state: FSMContext):
    await state.update_data(urgency=message.text)
    data = await state.get_data()
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    price = calculate_price(
        data['from_city'],
        data['to_city'],
        data['weight'],
        data['temperature'],
        data['urgency']
    )
    
    await state.update_data(price=price)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º
    calculation_message = (
        f"üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
        f"üìç –ò–∑: {data['from_city']} ‚Üí –í: {data['to_city']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}\n"
        f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ª—é–±–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:"
    )
    
    await message.answer(
        calculation_message,
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(DeliveryForm.phone)

@dp.message(DeliveryForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(phone=message.text)
    data = await state.get_data()
    
    order_summary = (
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['phone']}\n"
        f"üìç –ò–∑: {data['from_city']} ‚Üí –í: {data['to_city']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temperature']}\n"
        f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']} ‚ÇΩ"
    )
    
    await message.answer(
        order_summary,
        reply_markup=get_confirmation_keyboard()
    )

@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", DeliveryForm.phone)  # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "phone"
async def confirm_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    required_fields = ['phone', 'from_city', 'to_city', 'weight', 'temperature', 'urgency', 'price']
    if not all(field in data for field in required_fields):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    conn = sqlite3.connect('delivery_orders.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO orders (user_id, username, phone, from_city, to_city, weight, temperature, urgency, price, created_at) "
        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (
            user_id,
            username,
            data['phone'],
            data['from_city'],
            data['to_city'],
            data['weight'],
            data['temperature'],
            data['urgency'],
            data['price'],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )
    )
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    order_message = (
        f"üì¨ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}**\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {username} (ID: {user_id})\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['from_city']} ‚Üí {data['to_city']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üå° –†–µ–∂–∏–º: {data['temperature']}\n"
        f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n"
        f"üí∞ **–ò—Ç–æ–≥–æ: {data['price']} ‚ÇΩ**"
    )

    try:
        await bot.send_message(ADMIN_ID, order_message, parse_mode="Markdown")
        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()  # –í–∞–∂–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())